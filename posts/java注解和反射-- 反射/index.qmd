---
title: "java注解和反射-- 反射"
author: "dd21"
date: "2022-12-05" 
categories: [java]
image: ../csdn.png
---


## 动态语言

是一类在运行时可以改变其结构的语言∶例如新的函数、对象、甚至代码可以被引进，已有的函数可以被删除或是其他结构上的变化。

`通俗点说就是在运行时代码可以根据某些条件改变自身结构。`

主要动态语言:Object-C、C#、JavaScript、PHP、Python等。

## 静态语言

与动态语言相对应的，`运行时结构不可变的语言就是静态语言`。如Java、C、C+
Java不是动态语言，但Java可以称之为“准动态语言”。即Java有一定的动态性，我们可以利用反射机制获得类似动态语言的特性。Java的动态性让编程的时候更加灵活!


## 反射
通过Reflection的api操作实例化出来的对象从而获得对象内部的属性和方法,从而对对象进行操作.
`反射例子`
![在这里插入图片描述](https://img-blog.csdnimg.cn/078e7935b1ae4aaa8ceb2245a9f6bd64.png)

```java
package cn.usts.edu.Reflection03;

/**
 * 一个类在内存中只有一个class对象唯一的
 *  反射的原理:
 *      所有的类都有一个公共的祖宗类,都是Class的子类,所以根据他的父类可以倒退找到他的子类
 *      从而调用到子类中到方法和属性
 * */

public class ReflectionDemo {


    public static void main(String[] args) throws ClassNotFoundException {
        Class c1 = Class.forName("cn.usts.edu.Reflection03.User");
        System.out.println(c1);
        Class c2 = Class.forName("cn.usts.edu.Reflection03.User");
        Class c3 = Class.forName("cn.usts.edu.Reflection03.User");
        Class c4 = Class.forName("cn.usts.edu.Reflection03.User");
        Class c5 = Class.forName("cn.usts.edu.Reflection03.User");

        // 一个类在内存中只有一个class对象
        // 一个类被加载后,类的整个结构都会被封装在class对象中,所以他们的哈希值是一样的
        System.out.println(c1.hashCode());
        System.out.println(c2.hashCode());
        System.out.println(c3.hashCode());
        System.out.println(c4.hashCode());
        System.out.println(c5.hashCode());
    }

}



// 实体类,pojo,entity
class User{
    private int age;
    private int id;
    private String name;

    public User(int age, int id, String name) {
        this.age = age;
        this.id = id;
        this.name = name;
    }

    public User() {
    }

    public int getAge() {
        return age;
    }

    public void setAge(int age) {
        this.age = age;
    }

    public int getId() {
        return id;
    }

    public void setId(int id) {
        this.id = id;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    @Override
    public String toString() {
        return "User{" +
                "age=" + age +
                ", id=" + id +
                ", name='" + name + '\'' +
                '}';
    }
}

```

