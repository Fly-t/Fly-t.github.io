---
title: "java多线程-- lambda表达式(实现原理, 4行代码 最简单的实现 )"
author: "dd21"
date: "2022-12-05" 
categories: [java]
image: ../csdn.png
---


lambda表达式
就是将函数式接口直接实现
普通的实现是先new一个类实现接口,然后再通过类.方法去调用实现的方法.
lambda是直接省略了new一个类去实现接口中的方法.
 * lambda的实现过程
 * 方法1-方法4逐渐简化.
 * 大体的实现原理就是不通过实体类实现接口中的方法
 * 注意[接口中的方法只有一个--(函数式接口)]
 
[接口接收实体类和类接收实体类的区别](https://blog.csdn.net/dehu2510/article/details/101805401?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522163490182616780366545585%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=163490182616780366545585&biz_id=0&spm=1018.2226.3001.4187)
## 最简单的实现
```java
package cn.usts.edu.lesson05;

public class LambdaSelfTest {
    public static void main(String[] args) {

        // 接口接收实现接口地址
        ITest iTest1 = ()->{
            System.out.println("lambda 实现");
        };
        iTest1.test1();

    }
}

// 函数式接口
interface ITest{
    void test1();
}
```
## 进阶
`记得导入JUnit `
```java
package cn.usts.edu.lesson05;

import org.junit.Test;

public class LambdaSelfTest {
    
    @Test //导入JUnit 
    // lambda 进阶测试2
    public void test2(){
        ITest iTest1 = (a) -> {
            System.out.println("lambda 实现"+a);
        };

        iTest1.test1(2);
    }

    @Test
    // lambda 进阶测试3
    public void test3(){
        ITest iTest1 = (a) -> System.out.println("lambda 实现"+a);
        iTest1.test1(3);
    }

    @Test
    // lambda 进阶测试4
    public void test4(){
        ITest iTest1 = a -> System.out.println("lambda 实现"+a);
        iTest1.test1(4);
    }

    @Test
    // lambda 进阶测试4
    public void test5(){
        ITest iTest1 = a -> System.out.println("lambda 实现"+a);
        iTest1.test1(4);
    }
}

// 函数式接口
interface ITest{
    void test1(int a);
}


```

## 实现原理
```java
package cn.usts.edu.lesson05;

/**
 * lambda的实现过程
 * 方法1-方法4逐渐简化.
 * 大体的实现原理就是不通过实体类实现接口中的方法
 * 注意[接口中的方法只有一个--(函数式接口)]
 * */

public class LambdaTest {

    // 方法2---静态内部类
    static class Like2  implements ILike{
        @Override
        public void lambda() {
            System.out.println("实现ILike接口2");
        }
    }

    public static void main(String[] args) {
        // 实现1
        ILike like= new Like();// 这里用的接口对象去接受实现类的地址,  只能调用接口中实现的方法;
        // Like like= new Like();// 用类对象接收new的对象的地址,可以用类类中的所方法
        like.lambda();

        // 实现2
        like = new Like2();
        like.lambda();

        // 方法3 局部内部类  写在方法中
        class Like3  implements ILike{
            @Override
            public void lambda() {
                System.out.println("实现ILike接口3");
            }

        }
        // 实现3
        like = new Like3();
        like.lambda();

        // 方法4[最终实现]
        like = ()->{
            System.out.println("lambda表达式实现ILike接口4");
        };
        // 实现4 [最终实现]
        like.lambda();

    }
}
// 定义接口
interface ILike{
    void lambda();
}

// 方法1  new一个类实现接口
class Like implements ILike{
    @Override
    public void lambda() {
        System.out.println("实现ILike接口");
    }
}

```

