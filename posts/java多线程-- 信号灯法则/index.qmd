---
title: "java多线程-- 信号灯法则"
author: "dd21"
date: "2022-12-05" 
categories: [java]
image: ../csdn.png
---


##  信号灯法则
利用标志位,控制生产和消费
生产一个消费一个

![在这里插入图片描述](https://img-blog.csdnimg.cn/d311e523099a4d52be2d3e1c921c9306.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5aSn5q-beg==,size_20,color_FFFFFF,t_70,g_se,x_16)

```java
package cn.usts.edu.lesson08;
public class TrafficLightDemo {
    public static void main(String[] args) {
        Googs googs = new Googs();
        new Productor1(googs).start();
        new Consumer1(googs).start();
    }
}
//生产者
class Productor1 extends Thread{
    Googs goog;
    Productor1(Googs goog){
        this.goog = goog;
    }

    @Override
    public void run() {
        for (int i = 0; i < 100; i++) {
            goog.production(i+"产品");
        }
    }
}

//消费者
class Consumer1 extends Thread{
    Googs goog;
    Consumer1(Googs goog){
        this.goog = goog;
    }

    @Override
    public void run() {
        for (int i = 0; i < 100; i++) {
            goog.consume();
        }
    }
}

//商品
class Googs{
    //设置产品属性
    public String name;
    //设置标识位 flag为true消费者消费，如果false生产者生产
    boolean flag = true;

    //生产者生产
    public synchronized void production(String name){
        //如果生产完之后，等待消费者消费
        if(!flag){
            try {
                this.wait();
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
        }
        System.out.println("生产者生产了第"+name);
        //通知消费者消费
        this.name = name;
        this.notifyAll();
        flag = !this.flag;
    }
    //消费者消费
    public synchronized void consume(){
        //如果消费完了，等待生产者生产
        if(flag){
            try {
                this.wait();
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
        }
        System.out.println("消费了"+this.name+"产品--");
        this.notifyAll();
        flag = !this.flag;

    }
}
```

