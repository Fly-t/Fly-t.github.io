---
title: "protobuf协议-- 01使用（js简单实现）"
author: "dd21"
date: "2022-12-05" 
categories: [nodejs]
image: ../csdn.png
---


## protocol buffer
[官网](https://developers.google.cn/protocol-buffers/docs/reference/javascript-generated)

### 环境（windows）
![在这里插入图片描述](https://img-blog.csdnimg.cn/8e4a5ef359494036ac38f1ec57d695d9.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5aSn5q-beg==,size_20,color_FFFFFF,t_70,g_se,x_16)

![在这里插入图片描述](https://img-blog.csdnimg.cn/9690af23d6224daba4996e4a9f230a33.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5aSn5q-beg==,size_20,color_FFFFFF,t_70,g_se,x_16)
![在这里插入图片描述](https://img-blog.csdnimg.cn/04547b14a9474742b5203701f31d04ae.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5aSn5q-beg==,size_20,color_FFFFFF,t_70,g_se,x_16)
![在这里插入图片描述](https://img-blog.csdnimg.cn/14eccda702f345ec8d709302c57f5547.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5aSn5q-beg==,size_20,color_FFFFFF,t_70,g_se,x_16)
### 解压完成
![在这里插入图片描述](https://img-blog.csdnimg.cn/8384b6c8cbed408aa465aadd31b39cce.png)
### 添加环境变量
![在这里插入图片描述](https://img-blog.csdnimg.cn/6c7ed9ef3a764aa5b30ca27fafb9ee74.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5aSn5q-beg==,size_20,color_FFFFFF,t_70,g_se,x_16)

![在这里插入图片描述](https://img-blog.csdnimg.cn/45d034097e3642f388af92d8214c02cc.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5aSn5q-beg==,size_20,color_FFFFFF,t_70,g_se,x_16)

![在这里插入图片描述](https://img-blog.csdnimg.cn/0e960e0020564c3894f8237e16915832.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5aSn5q-beg==,size_20,color_FFFFFF,t_70,g_se,x_16)
`.proto`文件
```js

syntax = "proto3";

message Student {
  string username = 1;
  int32 password = 2;
}
```

### 创建格式化命令
将依赖库打包成js文件
然后直接导入这个新的js文件即可使用插件js
```bash
# comm js
protoc --proto_path=D:\code\plug\protocbuf\protocMsg --js_out=import_style=commonjs,binary:D:\code\plug\protocbuf\protocMsg\jsout Student.proto3
```

# 使用配webpack配置文件进行打包
[参考](https://www.webpackjs.com/guides/getting-started/#%E4%BD%BF%E7%94%A8%E4%B8%80%E4%B8%AA%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6)
创建`webpack.config.js`文件

```js
const path = require('path');

module.exports = {
  entry: './src/Student.proto3_pb.js', // 打包的文件名
  output: {
    filename: 'main.js',              // 输出的文件名
    path: path.resolve(__dirname, 'dist') // 输出的位置
  }
};
```
完成后执行
```bash
npx webpack --config webpack.config.js
```
导入要用的`html`文件中

```html
<!doctype html>
<html>
  <head>
    <title>开始</title>

  </head>
  <body>
    <script src="./dist/main.js"></script>
    <script type="text/javascript">
        const pt = new proto.Student();
        pt.setPassword(123);
        pt.setUsername("456");
        const byte = pt.serializeBinary();
        console.log(byte)

        const stu = proto.Student.deserializeBinary(byte)
        console.log(stu.getPassword())
    </script>
  </body>
</html>
```
![在这里插入图片描述](https://img-blog.csdnimg.cn/23588839b7794a0ab1f75787769ee825.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5aSn5q-beg==,size_20,color_FFFFFF,t_70,g_se,x_16)



