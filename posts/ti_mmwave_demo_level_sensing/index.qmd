---
title: "mmwave level sensing demo notes" 
author: "dd21"
date: "2023-04-26" 
categories: [ti,radar]
image: https://raw.githubusercontent.com/fly-t/images/main/blog/index-2023-04-26-21-18-44.png
---


# Abstract

TI has developed the IWR1843 mmWave radar sensor for industrial and automotive applications, including level sensing. A guide with notes on how to design and implement level sensing systems using the IWR1843 is available, covering topics such as signal processing, antenna design, and calibration techniques. This guide helps users understand and optimize the IWR1843's level sensing capabilities.

# Referance

[high_accuracy_user_guide.html](high_accuracy_user_guide.html)
[resource explorer](https://dev.ti.com/tirex/explore/node?a=VLyFKFf__2.4.0&node=A__AMIRzzFfLQdhCxzdyy.fEg__radar_toolbox__1AslXXD__LATEST)

# 原理

这个实验配置了一个发射天线和一个接收天线，并利用Zoom FFT技术进行操作，这种技术包含两个步骤。第一步是进行一维粗略FFT以搜索峰值。第二步是进行第二个放大FFT，它以更高的分辨率分析峰值频谱的一部分

# 对比`14xx` 和  `16xx/68xx` 

由于16xx/68xx设备包括片上DSP，而14xx设备没有，因此需要注意一些差异。由于片上FFT加速器的硬件限制，14xx版本的最大FFT大小为16K。因此，14xx版本将具有更低的处理延迟以及更低的功耗。16xx/68xx版本使用片上DSP，因此分辨率更高，FFT大小也更大.



# 配置命令解析
命令 RangeLimitCfg 使用以下参数结构 ，其中：
``` bash
RangeLimitCfg <numRangeBinZoomIn> <dis/enable> <min range limited> <max range limited>

<numRangeBinZoomIn >（仅限 16xx/68xx）：是在粗峰两侧放大的箱数。注意：这是一个优化值，不建议进行更改。
<dis/enable>：0 表示禁用，1 表示已启用
<min range limited>：以米为单位
<max range limited>：以米为单位
```

E: RangeLimitCfg 2 1 1.0 3.0


# 1. MSS通过UART发送数据代码解析


这里整体的发送逻辑是`dss`通过`mailBox`发送一个`Semaphore`给`mss`, 然后`mss`查看`Semaphore`的类型,
如果是`MMWDEMO_DSS2MSS_DETOBJ_READY`就去共享内存中将`dss`处理好的数据拷贝出来, 拷贝到`mss`的全局变量中,
然后`mss`就对`mss`这边的这个全局变量做操作. 

## 1.2 MailBox发送数据的操作流程
src: `mss_main.c`

``` c
/*z:这个是mailbox的函数, dsp和mss进行通信的工具 */
static void MmwDemo_mboxReadTask(UArg arg0, UArg arg1)
{
    MmwDemo_message      message;
    int32_t              retVal = 0;
    uint32_t             timeStart;

    /* wait for new message and process all the messages received from the peer */
    while(1)
    {
        /* 一直等待mailbox发送发过来数据, 如果没有数据就一直挂起. */
        Semaphore_pend(gMmwMssMCB.mboxSemHandle, BIOS_WAIT_FOREVER);

        /* Read the message from the peer mailbox: We are not trying to protect the read
         * from the peer mailbox because this is only being invoked from a single thread */
       
        /* 这段代码是从一个消息邮箱 (Mailbox) 中读取消息，并将消息内容保存到一个名为 message 
         * 的变量中。在这段代码中，使用了 Mailbox_read() 函数来从名为 gMmwMssMCB 的全局变量所
         * 表示的邮箱中读取消息。该函数的第一个参数是待读取的邮箱，第二个参数是存储消息的缓冲区
         * 的指针，第三个参数是要读取的消息的长度。该函数将返回一个表示操作结果的值。在这段代码中，
         * 变量 retVal 将被用于存储该函数的返回值。

         * 需要注意的是，在这段代码中，并没有进行任何多线程保护措施，因为该代码被假定只会从一个
         * 单一的线程中被调用。如果有多个线程可能会同时访问同一个邮箱，那么就需要在访问邮箱的过程
         * 中采取适当的同步措施来确保线程安全性 */
        retVal = Mailbox_read(gMmwMssMCB.peerMailbox, (uint8_t*)&message, sizeof(MmwDemo_message));
        if (retVal < 0)
        {
            /* Error: Unable to read the message. Setup the error code and return values */
            System_printf ("Error: Mailbox read failed [Error code %d]\n", retVal);
        }
        else if (retVal == 0)
        {
            /* We are done: There are no messages available from the peer execution domain. */
            continue;
        }
        else
        {
            /* Flush out the contents of the mailbox to indicate that we are done with the message. This will
             * allow us to receive another message in the mailbox while we process the received message. */
            
            /* 刷新邮箱准备后续接收 */
            Mailbox_readFlush (gMmwMssMCB.peerMailbox);

            /* Process the received message: */
            /* 查看消息类型 */ 
            switch (message.type)
            {
                /* 如果类型是 "MMWDEMO_DSS2MSS_DETOBJ_READY" */
                case MMWDEMO_DSS2MSS_DETOBJ_READY:
                    /* Got detetced objectes , shipped out through UART */

                    /* 把接收到的数据中的大小信息提取出来,提取到下面这个变量中 */
                	gMmwMssMCB.mssDataPathObj.inputInfoBuffSize = message.body.detObj.detObjOutsize;

                    /* 到共享内存中地址将检测的dsp处理好的数据拷贝到"gMmwMssMCB.mssDataPathObj.inputInfo"中*/
					memcpy((void *)&(gMmwMssMCB.mssDataPathObj.inputInfo),
                			(uint8_t*)SOC_translateAddress(message.body.detObj.detObjOutAddress, SOC_TranslateAddr_Dir_FROM_OTHER_CPU,NULL),
							message.body.detObj.detObjOutsize);
                    
                    /* 记录时间戳 */
                	timeStart = Cycleprofiler_getTimeStamp();
                	/* 当前时间花费在将处理结果从 DSP 中的共享内存复制到主机内存中的时间, 这里有点疑问, 为什么直接设置1和2 */
                    gMmwMssMCB.mssDataPathObj.cycleLog.copyResultsTimeCurrInusec = 1.f;
                    /* uart发送数据 */
                	MmwDemo_transmitProcessedOutput();
                	gMmwMssMCB.mssDataPathObj.cycleLog.copyResultsTimeCurrInusec = 2.f;
                	/* 计算发送时间 */
                    gMmwMssMCB.mssDataPathObj.cycleLog.sendingToUARTTimeCurrInusec = ((float)(Cycleprofiler_getTimeStamp() -  timeStart)/(float)R4F_CLOCK_MHZ);


                    /* Send a message to MSS to log the output data */
                    /* 清空message中的数据为后续重新接收做准备 */
                    memset((void *)&message, 0, sizeof(MmwDemo_message));

                    /* 将消息设置为"MMWDEMO_MSS2DSS_DETOBJ_SHIPPED"为别的操作做准备 */
                    message.type = MMWDEMO_MSS2DSS_DETOBJ_SHIPPED;

                    if (MmwDemo_mboxWrite(&message) != 0)
                    {
                        System_printf ("Error: Mailbox send message id=%d failed \n", message.type);
                    }
                    break;
                default:
                {
                    /* Message not support */
                    System_printf ("Error: unsupport Mailbox message id=%d\n", message.type);
                    break;
                }
            }
        }
    }
}
```
## 1.2 UART发送数据

这里就是接收到数据后,将数据赋值给mss的变量然后调整通信格式(按照`TLV`的格式发送). TLV格式ti的文档中有说明.
[TLV format guide](https://dev.ti.com/tirex/explore/node?a=VLyFKFf__2.4.0&node=A__AJXx96rI7gxMSeZVEpNFrw__radar_toolbox__1AslXXD__LATEST)

![](https://raw.githubusercontent.com/fly-t/images/main/blog/index-2023-04-27-09-18-39.png)

``` c

/** @brief Transmits detection data over UART
*
*    The following data is transmitted:
*    1. Header (size = 32bytes), including "Magic word", (size = 8 bytes)
*       and icluding the number of TLV items
*    TLV Items:
*    2. If detectedObjects flag is set, pbjOut structure containing range,
*       doppler, and X,Y,Z location for detected objects,
*       size = sizeof(objOut_t) * number of detected objects
*    3. If logMagRange flag is set,  rangeProfile,
*       size = number of range bins * sizeof(uint16_t)
*    4. If noiseProfile flag is set,  noiseProfile,
*       size = number of range bins * sizeof(uint16_t)
*    7. If rangeAzimuthHeatMap flag is set, the zero Doppler column of the
*       range cubed matrix, size = number of Rx Azimuth virtual antennas *
*       number of chirps per frame * sizeof(uint32_t)
*    8. If rangeDopplerHeatMap flag is set, the log magnitude range-Doppler matrix,
*       size = number of range bins * number of Doppler bins * sizeof(uint16_t)
*    9. If statsInfo flag is set, the stats information
*   @param[in] uartHandle   UART driver handle
*   @param[in] obj          Pointer data path object MmwDemo_DataPathObj
*/

void MmwDemo_transmitProcessedOutput()
{
    /* 创建header变量存储数据头(FrameHeader) */
    MmwDemo_output_message_header header;
    /* TLV的索引 */
    uint32_t tlvIdx = 0;

    uint32_t numPaddingBytes;
    /* 数据包的长度信息 */
    uint32_t packetLen;
    /* 数据对齐填充的padding */
    uint8_t padding[MMWDEMO_OUTPUT_MSG_SEGMENT_LEN];
	/* 用来存放从mailBox接收到的数据头得信息 */
    MmwDemo_detOutputHdr           *ptrDetOutputHdr;
	/* 用来存放从mailBox接收到的数据值部分 */
    radarProcessOutput_t * outputData;
    /* 设置T(ype)L(ength) */
    MmwDemo_output_message_tl   tl[MMWDEMO_OUTPUT_MSG_MAX];
	/* 用来存放fft数据的长度 */
    uint32_t fft1D_length;
    /* 存数据对象从结构体中提取出来 */
	MmwDemo_MSS_DataPathObj     *obj = &gMmwMssMCB.mssDataPathObj;
	/* 该变量决定什么变量发送给gui */
    MmwDemo_GuiMonSel   guiMonSel = gMmwMssMCB.cfg.guiMonSel;
	/* 拿到mss的uart句柄 */
    UART_Handle uartHandle = gMmwMssMCB.loggingUartHandle;

    /* 将数据放fft处理的header(chirp处理时间, 目标数据, frame处理时间, chirp处理时的负载,frame处理时的负载 ) */
    ptrDetOutputHdr = (MmwDemo_detOutputHdr *)&obj->inputInfo.header;
    /* 存放处理fft后存储的相位变化量, 最大的range,fft输出等信息 */
    outputData      = (radarProcessOutput_t *)&obj->inputInfo.pointCloudBuf;
    /* 提取出1Dfft的长度信息 */
    fft1D_length	=	outputData->fft1DSize;

    /* Clear message header */
    /* 清空数据头, 重新构造数据头, 每一帧的数据都重新构造, 防止出现脏数据 */
    memset((void *)&header, 0, sizeof(MmwDemo_output_message_header));
    /* Header: */
    header.platform = 0xA1642;
    header.magicWord[0] = 0x0102;
    header.magicWord[1] = 0x0304;
    header.magicWord[2] = 0x0506;
    header.magicWord[3] = 0x0708;
    header.numDetectedObj = 1;
    header.version =    MMWAVE_SDK_VERSION_BUILD |   //DEBUG_VERSION
                        (MMWAVE_SDK_VERSION_BUGFIX << 8) |
                        (MMWAVE_SDK_VERSION_MINOR << 16) |
                        (MMWAVE_SDK_VERSION_MAJOR << 24);

    packetLen = sizeof(MmwDemo_output_message_header);
    //detectedObjects
    {
        tl[tlvIdx].type = MMWDEMO_OUTPUT_MSG_DETECTED_POINTS;
        tl[tlvIdx].length = sizeof(MmwDemo_detectedObj) * 1 +
                            sizeof(MmwDemo_output_message_dataObjDescr);
        packetLen += sizeof(MmwDemo_output_message_tl) + tl[tlvIdx].length;
        tlvIdx++;
    }
    //Range FFT input
    if(guiMonSel.logRangeInput)
    {
        tl[tlvIdx].type = MMWDEMO_OUTPUT_MSG_RANGE_PROFILE;
        tl[tlvIdx].length = 2 * sizeof(float) * fft1D_length;
        packetLen += sizeof(MmwDemo_output_message_tl) + tl[tlvIdx].length;
        tlvIdx++;
    }
    //statsInfo
    {
        tl[tlvIdx].type = MMWDEMO_OUTPUT_MSG_STATS;
        tl[tlvIdx].length = sizeof(MmwDemo_output_message_stats);
        packetLen += sizeof(MmwDemo_output_message_tl) + tl[tlvIdx].length;
        tlvIdx++;
    }

    header.numTLVs = tlvIdx;
    /* Round up packet length to multiple of MMWDEMO_OUTPUT_MSG_SEGMENT_LEN */
    header.totalPacketLen = MMWDEMO_OUTPUT_MSG_SEGMENT_LEN *
            ((packetLen + (MMWDEMO_OUTPUT_MSG_SEGMENT_LEN-1))/MMWDEMO_OUTPUT_MSG_SEGMENT_LEN);
    header.timeCpuCycles =  Pmu_getCount(0);
    header.frameNumber = 0;


    UART_writePolling (uartHandle,
                       (uint8_t*)&header,
                       sizeof(MmwDemo_output_message_header));

    tlvIdx = 0;
    /* Send detected Objects */
    {
        MmwDemo_output_message_dataObjDescr descr;
        MmwDemo_detectedObj dummyDetectionOut; //work around the current format
        int32_t tempRange;

        memset((void *)&dummyDetectionOut, 0, sizeof(MmwDemo_detectedObj));

        tempRange                       =   (int32_t)(outputData->rangeEst * 1048576.f);

        dummyDetectionOut.dopplerIdx    =   0;
        dummyDetectionOut.peakVal       =   0;
        dummyDetectionOut.rangeIdx      =   (uint16_t) tempRange & 0xFFFF;
        dummyDetectionOut.x             =   tempRange >> 16;
        dummyDetectionOut.y             =   0;
        dummyDetectionOut.z             =   0;

        UART_writePolling (uartHandle,
                           (uint8_t*)&tl[tlvIdx],
                           sizeof(MmwDemo_output_message_tl));
        /* Send objects descriptor */
        descr.numDetetedObj = 1;
        descr.xyzQFormat = 20;
        UART_writePolling (uartHandle, (uint8_t*)&descr, sizeof(MmwDemo_output_message_dataObjDescr));

        /*Send array of objects */
        UART_writePolling (uartHandle, (uint8_t*)&dummyDetectionOut, sizeof(MmwDemo_detectedObj) * 1);
        tlvIdx++;
    }

    /* Send Range FFT input */
    if(guiMonSel.logRangeInput)
    {
        UART_writePolling (uartHandle,
                           (uint8_t*)&tl[tlvIdx],
                           sizeof(MmwDemo_output_message_tl));

        UART_writePolling (uartHandle, (uint8_t*)outputData->fft1Dinput, 2 * fft1D_length * sizeof(float));
        tlvIdx++;
    }

    /* Send stats information */
    {
        MmwDemo_output_message_stats stats;
        stats.interChirpProcessingMargin = (uint32_t) ptrDetOutputHdr->chirpProcessingMarginInUsec;
        stats.interFrameProcessingMargin = (uint32_t) ptrDetOutputHdr->frameProcessingMarginInUsec;
        stats.interFrameProcessingTime = 0;
        stats.transmitOutputTime = (uint32_t) obj->cycleLog.sendingToUARTTimeCurrInusec;
        stats.activeFrameCPULoad = (uint32_t) ptrDetOutputHdr->chirpProcessingLoading;
        stats.interFrameCPULoad = (uint32_t) ptrDetOutputHdr->frameProcessingLoading;

        UART_writePolling (uartHandle,
                           (uint8_t*)&tl[tlvIdx],
                           sizeof(MmwDemo_output_message_tl));
        UART_writePolling (uartHandle,
                           (uint8_t*)&stats,
                           tl[tlvIdx].length);
        tlvIdx++;
    }

    /* Send padding bytes */
    numPaddingBytes = MMWDEMO_OUTPUT_MSG_SEGMENT_LEN - (packetLen & (MMWDEMO_OUTPUT_MSG_SEGMENT_LEN-1));
    if (numPaddingBytes<MMWDEMO_OUTPUT_MSG_SEGMENT_LEN)
    {
        UART_writePolling (uartHandle,
                            (uint8_t*)padding,
                            numPaddingBytes);
    }


}
```

# 2. 液位数据处理部分

雷达前端接收数据, 然后将数据在dsp上处理


**存储在L2内存中所有的控制结构体**, 所有的操作都是基于该结构体进行展开的

``` c
typedef struct _RADARDEMO_highAccuRangeProc_handle_
{
    float * twiddle;                    /**< 1DFFT使用的扭曲因子。*/
    float * wnCoarse;                   /**< 粗级别的频率扭曲因子。*/
    float * wnFine;                     /**< 细级别的频率扭曲因子。*/

    float * inputSig;                   /**< 用于累积帧内所有chirp信号的缓冲区。*/
    float * demodSig;                   /**< 指向相位解调信号的指针。*/

    float * scratchPad;                 /**< 模块的缓存内存。*/
    float * fft1DOutSig;                /**< 指向1D FFT输出信号的指针。*/

    float maxBeatFreq;                  /**< 最大拍频。*/
    float chirpBandwidth;               /**< chirp带宽。*/
    float chirpRampTime;                /**< chirp斜坡时间。*/
    float fc;                           /**< chirp起始频率。*/
    float chirpSlope;                   /**< chirp斜率。*/
    float adcStartTimeConst;            /**< ADC启动时间常量。*/
    float adcSampleRate;                /**< ADC采样率。*/
    int32_t coarseRangeInd;             /**< 粗略频率估计的索引。*/

    uint32_t fft1DSize;                 /**< 1D FFT大小。*/
    uint32_t log2fft1DSize;             /**< 1D FFT大小的log2值。*/
    uint32_t nSamplesPerChirp;          /**< 每个chirp中的采样数。*/
    uint32_t numChirpsPerFrame;         /**< 每帧中的chirp数。*/
    float * win1D;                      /**< 指向1D窗函数的指针。*/
    int16_t win1DLength;                /**< 1D窗函数的一半长度。*/

    uint8_t numRangeBinZoomIn;          /**< 用于频率估计缩小范围的bin数。*/
    uint8_t enablePhaseEst;             /**< 启用相位校正进行估计。*/
    uint8_t enableLinearFit;            /**< 在相位估计中启用线性拟合。*/
    uint8_t enableFilter;               /**< 在相位估计中启用滤波。*/
    uint16_t skipLeft;                  /**< 从左侧跳过的样本数。*/
    uint16_t skipRight;                 /**< 从右侧跳过的样本数。*/
    float      skipMin;                 /* 从0到最小范围（m）要跳过的样本数 */   
    float      skipMax;                 /* 从最大范围（m）到远处要跳过的样本数 */

} RADARDEMO_highAccuRangeProc_handle;
```


**雷达配置配置结构体**, 雷达所有的相关配置都在这个结构体中, 主要的处理操作是将该配置结构体传递到上面的控制结构体中. 然后进行相关操作. 这大大降低了代码的耦合性.

``` c
typedef struct _RADARDEMO_highAccuRangeProc_config_
{
	uint32_t     fft1DSize;  					/**< 1D FFT size，                                      一维FFT的大小*/
	uint32_t     nSamplesPerChirp;				/**< number of samples per chirp，                      每个chirp中的采样点数*/
	uint32_t     numChirpsPerFrame;				/**< number of chirp per frame，                        每帧中的chirp数量*/
	float        maxBeatFreq;  	    			/**< maximum beat frequency，                           最大拍频*/
	float        chirpBandwidth;  	    		/**< chirp bandwidth，                                  chirp带宽*/
	float        chirpRampTime;  	    		/**< chirp ramp duration，                              chirp的斜变时间*/
	float        fc;  	    					/**< chirp start frequency，                            chirp的起始频率*/
	float        chirpSlope;  	    			/**< chirp slope，                                      chirp的斜率*/
	float        adcStartTimeConst;  	    	/**< ADC start constant，                               ADC启动常数*/
	float        adcSampleRate;  	    		/**< ADC sampling rate，                                ADC采样率*/
	float       *win1D;  	    	            /**< pointer to 1D windowing function，                 指向一维窗函数的指针*/
	int16_t      win1DLength;  	    	        /**< half length of the 1D windowing function，         一维窗函数的一半长度*/
	uint8_t      numRangeBinZoomIn;  	        /**< number of bins to zoom in for frequenc estimation，进行频率估计的缩放的范围*/
	uint8_t      enablePhaseEst;  				/**< enable estimation using phase correction，         使用相位校正进行估计的开关*/
	uint8_t      enableLinearFit;  				/**< enable linear fit in phase estimation，            在相位估计中开启线性拟合*/
	uint8_t      enableFilter;  				/**< enable filtering in phase estimation，             在相位估计中开启滤波*/
	uint16_t     skipLeft;						/**< number of samples to skip from the left，          从左侧跳过的样本数*/
	uint16_t     skipRight;					    /**< number of samples to skip from the right，         从右侧跳过的样本数*/
	float       *fft1DIn;  	    	            /**< pointer to 1D FFT input，                          指向一维FFT输入的指针*/
    uint8_t      enableRangeLimit;              /**< enable RangeLimit，                                开启范围限制*/
    float        skipMin;                       /**< number of samples to skip from 0 to min range(m)， 从0到最小范围跳过的样本数（米）*/
    float        skipMax;                       /**< number of samples to skip from the max range(m) to faraway，从最大范围（米）到远处跳过的样本数*/
} RADARDEMO_highAccuRangeProc_config;
```



## 2.1 创建和初始化 液位高度Demo
调制斜率为handle->chirpSlope、1D FFT尺寸为handle->fft1DSize时的距离分辨率。距离分辨率是雷达测距系统中的一个参数，表示能够分辨出两个物体之间的最小距离。

距离分辨率公式

![](https://raw.githubusercontent.com/fly-t/images/main/blog/index-2023-04-27-13-22-28.png)

其中，$\Delta r$为距离分辨率，$c$为光速，$B$为调制带宽，$N$为FFT点数。在代码中，将光速$c$和调制带宽$B$用常数`3.0e8`和`handle->adcSampleRate`表示，FFT点数$N$用handle->fft1DSize表示。将这些参数代入距离分辨率公式计算即可.

src: `RADARDEMO_highAccuRangeProc.c`

``` c
void	* RADARDEMO_highAccuRangeProc_create(
                            IN  RADARDEMO_highAccuRangeProc_config * moduleConfig, 
							OUT RADARDEMO_highAccuRangeProc_errorCode * errorCode)
							
{
	int32_t     i, itemp;
	double		real, imag;
	double PI = 3.14159265358979323846;
	double		denom;
    uint8_t enableRangeLimit;
    float skipMin;
    float skipMax;
    float rangeResolution;

	RADARDEMO_highAccuRangeProc_handle * handle;
	
	*errorCode		=	RADARDEMO_HIGHACCURANGEPROC_NO_ERROR;

	handle						=	(RADARDEMO_highAccuRangeProc_handle *) radarOsal_memAlloc((uint8_t) RADARMEMOSAL_HEAPTYPE_LL2, 0, sizeof(RADARDEMO_highAccuRangeProc_handle), 1);
	if (handle == NULL)
	{
		*errorCode	=	RADARDEMO_HIGHACCURANGEPROC_FAIL_ALLOCATE_HANDLE;
		return (handle);
	}
	
	handle->nSamplesPerChirp	=	moduleConfig->nSamplesPerChirp;//512
	handle->fft1DSize			=	moduleConfig->fft1DSize;//512
	handle->numChirpsPerFrame	=	moduleConfig->numChirpsPerFrame;//200
	handle->win1DLength			=	moduleConfig->win1DLength;//16
	handle->maxBeatFreq			=	moduleConfig->maxBeatFreq;//5000k
	handle->chirpBandwidth		=	moduleConfig->chirpBandwidth;//3450805504Hz
	handle->chirpRampTime		=	moduleConfig->chirpRampTime;//102.4us
	handle->fc					=	moduleConfig->fc;//77GHz
	handle->chirpSlope			=	moduleConfig->chirpSlope;//33.699MHz/us
	handle->adcStartTimeConst	=	moduleConfig->adcStartTimeConst;//0
	handle->adcSampleRate		=	moduleConfig->adcSampleRate;//500K
	handle->numRangeBinZoomIn	=	moduleConfig->numRangeBinZoomIn;//2
	handle->enablePhaseEst		=	moduleConfig->enablePhaseEst;//0
	handle->enableLinearFit		=	moduleConfig->enableLinearFit;//0
	handle->enableFilter		=	moduleConfig->enableFilter;//0
	handle->skipLeft			=	moduleConfig->skipLeft;//0
	handle->skipRight			=	moduleConfig->skipRight;//0
    enableRangeLimit            =   moduleConfig->enableRangeLimit;//0
    skipMin                     =   moduleConfig->skipMin;//0.26
    skipMax                     =   moduleConfig->skipMax;//6.00
	itemp						=	handle->fft1DSize;
	i							=	0;

    /* 计算距离分辨率 */
	rangeResolution = (3.0*1e8) * (float)handle->adcSampleRate/(2 * (float)handle->chirpSlope * (float)handle->fft1DSize);//0.043468

//    printf("DSS:win1DLength=%d\n",handle->fft1DSize);
//    printf("DSS:digOutSampleRate=%f\n",handle->adcSampleRate);
//    printf("DSS:freqSlopeConst=%f\n",handle->chirpSlope);
//    printf("DSS:rangeResolution=%f\n",rangeResolution);

    uint16_t RangeBinfft1DSize,RangeBinMin,RangeBinMax;

    /* 如果设置距离限制值 */
    if(enableRangeLimit)
    {
        /* fft大小:512, 这里根据限制的距离范围进一步限制处理数据, 提高数据处理的效率 */
        RangeBinfft1DSize           =   handle->fft1DSize;
        /* 对计算出的rangebin进行四舍五入 */
        RangeBinMin                 = (uint16_t)(skipMin/rangeResolution + 0.5);
        RangeBinMax                 = (uint16_t)(skipMax/rangeResolution + 0.5);

        /* 如果rangebin下溢就设置为0 */
        if(RangeBinMin > RangeBinfft1DSize)
            RangeBinMin = 0;
        /* 如果rangebin上溢就设置为rangebin最大值 */
        if(RangeBinMax > RangeBinfft1DSize)
            RangeBinMax = RangeBinfft1DSize;

        /* 限制的rangeBin左右区间 */
        handle->skipLeft            =   RangeBinMin;//6
        handle->skipRight           =   RangeBinfft1DSize - RangeBinMax;//374

        printf("DSS:enableRangeLimit=%d,skipMin=%.2f,skipMax=%.2f,rangeResolution=%.4f,skipLeft=%d,skipRight=%d\n",enableRangeLimit,skipMin,skipMax,rangeResolution,handle->skipLeft,handle->skipRight);
    }
    else
    {
        printf("DSS:enableRangeLimit=%d\n",enableRangeLimit);

    }


    /* 同价itemp在二进制格式下有多少个1, 然后存储在i变量中 */
	while(1)
    {
        if(itemp == 1) break;
        itemp = itemp >> 1;
        i++;
    }
    /* fft级联次数log2(64)=6 */
	handle->log2fft1DSize		=	i;

    /* 在L2内存中申请一块`窗`句柄空间 */
	handle->win1D				=	(float *) radarOsal_memAlloc((uint8_t) RADARMEMOSAL_HEAPTYPE_LL2, 0, moduleConfig->win1DLength * sizeof(float), 8);
     /* 返回错误码 */
	if (handle->win1D == NULL)
	{
		*errorCode	=	RADARDEMO_HIGHACCURANGEPROC_FAIL_ALLOCATE_LOCALINSTMEM;
		return (handle);
	}
    /* 拿到dss_data_path中的窗参数 */
	for (i = 0; i < (int32_t)moduleConfig->win1DLength; i++ )
	{
		handle->win1D[i]		=	moduleConfig->win1D[i];
	}
    
    /* 首先在内存中为handle->twiddle(旋转因子, 为fft做准备)分配一块空间，大小为2 * handle->fft1DSize *sizeof(float) */
	handle->twiddle			=	(float *)radarOsal_memAlloc((uint8_t) RADARMEMOSAL_HEAPTYPE_LL2, 0, 2 * handle->fft1DSize * sizeof(float), 8);
	/* 判断并返回错误码 */

    
    /* 调用tw_gen_float函数生成1D FFT所需的旋转因子，存储在handle->twiddle中,旋转因子可以用于快速傅里叶变换（FFT）算法，它能够快速地将时域采样转换为频域信号 */
	tw_gen_float(handle->twiddle, handle->fft1DSize);

    /* 为即将做fft的输入信号(数据)申请空间 */
	handle->inputSig		=	(float *)radarOsal_memAlloc((uint8_t) RADARMEMOSAL_HEAPTYPE_LL2, 0, 2 * handle->fft1DSize * sizeof(float), 8);
    /* 判断并返回错误码 */
	

    /* 在L2中申请内存, 用作傅里叶变换运算过程中的中间计算结果 */
	handle->scratchPad		=	(float *)radarOsal_memAlloc((uint8_t) RADARMEMOSAL_HEAPTYPE_LL2, 1, 2 * 2 * handle->fft1DSize * sizeof(float), 8);
    /* 判断并返回错误码 */

    /* `FFT1D输出结果` 和 `相位解调`的结果都存放在缓冲scratchPad变量中 */
	handle->fft1DOutSig		=	handle->scratchPad;
    /* 相位解调:将调制信号从复数域映射到实数域，并通过这种映射 `去除相位信息`。在解调之后，得到的信号 `只包含振幅信息` */
	handle->demodSig		=	handle->scratchPad;
    
    /* 将所有的fft原始数据放到 `fft1DIn` 这个指针变量中带回去 */
	moduleConfig->fft1DIn 	= handle->inputSig;

    /* 分配一块内存，用于存储 `粗` 调的旋转因子（wnCoarse） */
	handle->wnCoarse		=	(float *)radarOsal_memAlloc((uint8_t) RADARMEMOSAL_HEAPTYPE_LL2, 0, 2 * handle->fft1DSize * sizeof(float), 8);
	
    /* 生成一组用于傅里叶变换的`粗`调旋转因子, 存储在 `wnCoarse` 中 */
	denom = 1.0/((double)handle->fft1DSize);
	for (i = 0; i < (int32_t)handle->fft1DSize; i++)
	{
		real		=	cos(-2 * PI * i *denom);
		imag		=	sin(-2 * PI * i *denom);
		handle->wnCoarse[2*i]		=	imag;
		handle->wnCoarse[2*i+ 1 ]	=	real;
	}

    /* 分配一块内存，用于存储 `细` 调的旋转因子（wnCoarse） */
	handle->wnFine		=	(float *)radarOsal_memAlloc((uint8_t) RADARMEMOSAL_HEAPTYPE_LL2, 0, 2 * handle->fft1DSize * sizeof(float), 8);
	

    /* 用于生成一组用于傅里叶变换的`细`调旋转因子, 存储在 `wnFine` 中 */
	denom = 1.0/ ((double)(handle->fft1DSize * handle->fft1DSize)); // 将旋转因子限制在单位圆上
	for (i = 0; i < (int32_t)handle->fft1DSize; i++)
	{
		real		=	cos(-2 * PI * i *denom);
		imag		=	sin(-2 * PI * i *denom);
		handle->wnFine[2*i]		=	imag;
		handle->wnFine[2*i+ 1 ]	=	real;
	}

	return((void *)handle);
}
```
## 2.2 释放所创建时申请的内存空间

``` c
/* 释放所有申请额空间 */
void	RADARDEMO_highAccuRangeProc_delete(
                            IN  void * handle)
{
	RADARDEMO_highAccuRangeProc_handle *rangeProcInst;
	
	rangeProcInst	=	(RADARDEMO_highAccuRangeProc_handle *) handle;

	radarOsal_memFree(rangeProcInst->inputSig, rangeProcInst->fft1DSize * 2 * sizeof(float));
	radarOsal_memFree(rangeProcInst->twiddle, rangeProcInst->fft1DSize * 2 * sizeof(float));
	radarOsal_memFree(rangeProcInst->wnFine, rangeProcInst->fft1DSize * 2 * sizeof(float));
	radarOsal_memFree(rangeProcInst->wnCoarse, rangeProcInst->fft1DSize * 2 * sizeof(float));
	radarOsal_memFree(rangeProcInst->win1D, rangeProcInst->win1DLength * 2 * sizeof(float));
	radarOsal_memFree(rangeProcInst->demodSig, rangeProcInst->nSamplesPerChirp * 2 * sizeof(float));
	
	radarOsal_memFree(handle, sizeof(RADARDEMO_highAccuRangeProc_handle));
}
```

## 2.3 运行

``` c

RADARDEMO_highAccuRangeProc_errorCode	RADARDEMO_highAccuRangeProc_run(
                            IN  void * handle,
							IN  RADARDEMO_highAccuRangeProc_input * rangeProcInput, 
							OUT RADARDEMO_highAccuRangeProc_output * rangeProcOutput)

{
	int32_t		chirpNum;
	RADARDEMO_highAccuRangeProc_handle *rangeProcInst;
	cplx16_t    * inputSignal;
	RADARDEMO_highAccuRangeProc_errorCode errorCode = RADARDEMO_HIGHACCURANGEPROC_NO_ERROR;

	inputSignal		=	rangeProcInput->inputSignal;
	rangeProcInst	=	(RADARDEMO_highAccuRangeProc_handle *) handle;

	if (inputSignal == NULL)
		errorCode	=	RADARDEMO_HIGHACCURANGEPROC_INOUTPTR_NOTCORRECT;

	if (rangeProcInst->win1D == NULL)
		errorCode	=	RADARDEMO_HIGHACCURANGEPROC_INOUTPTR_NOTCORRECT;

	if (errorCode > RADARDEMO_HIGHACCURANGEPROC_NO_ERROR)
		return(errorCode);
	
	chirpNum		=	(int32_t) rangeProcInput->chirpNumber;
	if (chirpNum >= 0)
	{ /*accumulating all the chirps and convert to float*/

		RADARDEMO_highAccuRangeProc_accumulateInput(
                            rangeProcInst->nSamplesPerChirp,
                            rangeProcInst->fft1DSize,
                            rangeProcInst->numChirpsPerFrame,
                            rangeProcInst->win1D,
							rangeProcInst->win1DLength,
							rangeProcInput->inputSignal,
							chirpNum,
							rangeProcInst->inputSig);

	}
	else
	{ 
		/* range measurements*/

		RADARDEMO_highAccuRangeProc_rangeEst(
                            rangeProcInst, 
							&(rangeProcOutput->rangeEst),
							&(rangeProcOutput->deltaPhaseEst),
							&(rangeProcOutput->linearSNREst));

	}
	return(errorCode);
}

```



